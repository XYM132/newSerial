diff --git a/SerialInfo.pro b/SerialInfo.pro
index 5533917..852a743 100644
--- a/SerialInfo.pro
+++ b/SerialInfo.pro
@@ -4,7 +4,7 @@
 #
 #-------------------------------------------------
 
-QT       += core gui
+QT       += core gui serialport widgets
 
 greaterThan(QT_MAJOR_VERSION, 4): QT += widgets
 
@@ -32,3 +32,10 @@ HEADERS += \
 
 FORMS += \
         mainwindow.ui
+
+LIBS += -luser32
+
+RESOURCES += \
+    icon.qrc
+
+RC_ICOS = :/img/img/com.ico
diff --git a/icon.qrc b/icon.qrc
index 90f4a83..3a42d7f 100644
--- a/icon.qrc
+++ b/icon.qrc
@@ -1,2 +1,5 @@
-<!DOCTYPE RCC>
-<RCC version="1.0"/>
+<RCC>
+    <qresource prefix="/img">
+        <file>img/com.ico</file>
+    </qresource>
+</RCC>
diff --git a/img/bing.ico b/img/bing.ico
deleted file mode 100644
index a1a8264..0000000
Binary files a/img/bing.ico and /dev/null differ
diff --git a/img/com.jpg b/img/com.jpg
deleted file mode 100644
index ef2f7c8..0000000
Binary files a/img/com.jpg and /dev/null differ
diff --git a/mainwindow.cpp b/mainwindow.cpp
index 49d64fc..975d7ff 100644
--- a/mainwindow.cpp
+++ b/mainwindow.cpp
@@ -1,14 +1,291 @@
 #include "mainwindow.h"
 #include "ui_mainwindow.h"
+#include <qDebug>
+
+#include <QAbstractNativeEventFilter>
+
+#include <windows.h>
+#include <dbt.h>
+#include <devguid.h>
+#include <SetupAPI.h>
+#include <InitGuid.h>
+#include <QApplication>
+#include <QDesktopWidget>
+#include <QMessageBox>
 
 MainWindow::MainWindow(QWidget *parent) :
     QMainWindow(parent),
     ui(new Ui::MainWindow)
 {
     ui->setupUi(this);
+    on_pushButton_clicked();
+
+    isClose=false;
+
+    _icon = new QSystemTrayIcon();
+    _menu = new QMenu();
+    _icon->setIcon(QIcon(":/img/img/com.ico"));
+    _icon->setToolTip("查看系统串口.");
+
+    _menu->addAction("退出",this,SLOT(slotcloseApp()));
+
+    _icon->setContextMenu(_menu);
+    _icon->show();
+
+    connect(_icon,SIGNAL(activated(QSystemTrayIcon::ActivationReason)),this,SLOT(slotActived(QSystemTrayIcon::ActivationReason)));
+
+
+#if 1//注册USB监听
+    static const GUID GUID_DEVINTERFACE_LIST[] =
+    {
+        // GUID_DEVINTERFACE_USB_DEVICE
+        { 0xA5DCBF10, 0x6530, 0x11D2,{ 0x90, 0x1F, 0x00, 0xC0, 0x4F, 0xB9, 0x51, 0xED } },
+        // GUID_DEVINTERFACE_DISK
+        //{ 0x53f56307, 0xb6bf, 0x11d0,{ 0x94, 0xf2, 0x00, 0xa0, 0xc9, 0x1e, 0xfb, 0x8b } },
+        // GUID_DEVINTERFACE_HID,
+        { 0x4D1E55B2, 0xF16F, 0x11CF,{ 0x88, 0xCB, 0x00, 0x11, 0x11, 0x00, 0x00, 0x30 } },
+        // GUID_NDIS_LAN_CLASS
+        //{ 0xad498944, 0x762f, 0x11d0,{ 0x8d, 0xcb, 0x00, 0xc0, 0x4f, 0xc3, 0x35, 0x8c } }
+        //// GUID_DEVINTERFACE_COMPORT
+        //{ 0x86e0d1e0, 0x8089, 0x11d0, { 0x9c, 0xe4, 0x08, 0x00, 0x3e, 0x30, 0x1f, 0x73 } },
+        //// GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR
+        //{ 0x4D36E978, 0xE325, 0x11CE, { 0xBF, 0xC1, 0x08, 0x00, 0x2B, 0xE1, 0x03, 0x18 } },
+        //// GUID_DEVINTERFACE_PARALLEL
+        //{ 0x97F76EF0, 0xF883, 0x11D0, { 0xAF, 0x1F, 0x00, 0x00, 0xF8, 0x00, 0x84, 0x5C } },
+        //// GUID_DEVINTERFACE_PARCLASS
+        //{ 0x811FC6A5, 0xF728, 0x11D0, { 0xA5, 0x37, 0x00, 0x00, 0xF8, 0x75, 0x3E, 0xD1 } }
+    };
+
+    //注册插拔事件
+    HDEVNOTIFY hDevNotify;
+    DEV_BROADCAST_DEVICEINTERFACE NotifacationFiler;
+    ZeroMemory(&NotifacationFiler, sizeof(DEV_BROADCAST_DEVICEINTERFACE));
+    NotifacationFiler.dbcc_size = sizeof(DEV_BROADCAST_DEVICEINTERFACE);
+    NotifacationFiler.dbcc_devicetype = DBT_DEVTYP_DEVICEINTERFACE;
+
+    for (int i = 0; i < sizeof(GUID_DEVINTERFACE_LIST) / sizeof(GUID); i++)
+    {
+        NotifacationFiler.dbcc_classguid = GUID_DEVINTERFACE_LIST[i];//GetCurrentUSBGUID();//m_usb->GetDriverGUID();
+
+        hDevNotify = RegisterDeviceNotification((HANDLE)this->winId(), &NotifacationFiler, DEVICE_NOTIFY_WINDOW_HANDLE);
+        if (!hDevNotify)
+        {
+            //int Err = GetLastError();
+            qDebug() << "注册失败" << endl;
+        }
+        //else
+    }
+#endif
+
+#if 1 //写入开机自启
+    QString appName = QApplication::applicationName();//程序名称
+
+    QString appPath = QApplication::applicationFilePath();// 程序路径
+
+    appPath = appPath.replace("/","\\");
+
+    QSettings *reg=new QSettings(
+                "HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run",
+                QSettings::NativeFormat);
+
+    QString val = reg->value(appName).toString();// 如果此键不存在，则返回的是空字符串
+    if(val != appPath)
+        reg->setValue(appName,appPath);// 如果移除的话，reg->remove(applicationName);
+
+    reg->deleteLater();
+
+    this->hide();
+#endif
+
+    this->setWindowFlags(Qt::FramelessWindowHint);
+
+    QRect screenRect = QApplication::desktop()->availableGeometry();
+    this->setGeometry(QRect(screenRect.width()-this->width(),
+                            screenRect.height()-this->height(),
+                            this->width(),
+                            this->height()));
+
+
+    m_timer = new QTimer();
+    m_timer->setInterval(10000);
+    m_timer->setSingleShot(true);
+    connect(m_timer,SIGNAL(timeout()),this,SLOT(TimerTimeOut()));
+    m_timer->start();
+    this->installEventFilter(this);
+
 }
 
 MainWindow::~MainWindow()
 {
     delete ui;
 }
+
+
+
+
+void MainWindow::on_pushButton_clicked()
+{
+    QSerialPort* serial = new QSerialPort();
+    ui->textEdit_new->clear();
+    ui->textEdit_all->clear();
+    foreach(const QSerialPortInfo &portinfo,QSerialPortInfo::availablePorts())
+       {
+           serial->setPort(portinfo); //此处的serial是在构造函数中QSerialPort 的对象；
+           if(qFind(allCom.begin(),allCom.end(),serial->portName()) == allCom.end())
+           {
+               ui->textEdit_new->append(serial->portName() +" : "+portinfo.description());
+               allCom.push_back(serial->portName());
+
+           }
+           ui->textEdit_all->append(serial->portName() +" : "+portinfo.description());
+       }
+}
+
+
+bool MainWindow::nativeEvent(const QByteArray & eventType, void * message, long *result)
+{
+
+    Q_UNUSED(eventType);
+    QString DevPathName;
+    MSG* msg = reinterpret_cast<MSG*>(message);
+    int msgType = msg->message;
+    if (msgType == WM_DEVICECHANGE)
+    {
+        PDEV_BROADCAST_DEVICEINTERFACE lpdb = (PDEV_BROADCAST_DEVICEINTERFACE)msg->lParam;
+        switch (msg->wParam)
+        {
+        case DBT_DEVICEARRIVAL:   // usb insert
+
+            if (lpdb->dbcc_devicetype == DBT_DEVTYP_DEVICEINTERFACE)
+            {
+
+                DevPathName = QString::fromWCharArray(lpdb->dbcc_name); // wchar* to QString
+
+                qDebug()<<"DBT_DEVICEARRIVAL";
+
+                //判断是否插入的设备是串口
+                QSerialPort* serial = new QSerialPort();
+                foreach(const QSerialPortInfo &portinfo,QSerialPortInfo::availablePorts())
+                {
+                   serial->setPort(portinfo); //此处的serial是在构造函数中QSerialPort 的对象；
+                   if(qFind(allCom.begin(),allCom.end(),serial->portName()) == allCom.end())
+                   {
+                       on_pushButton_clicked();
+                       this->show();
+                       m_timer->start();
+                       break;
+                   }
+                }
+
+#if 0
+                if ((MyDevPathName.contains(DevPathName, Qt::CaseInsensitive)) && (InterfaceSelect() == PORT_USB)) {
+                    OnBnClickedBtnOpenDevice();
+                    //AddToInfOut(_T("Device connected"),1,1);
+                }
+#endif
+            }
+
+            break;
+        case DBT_DEVICEREMOVECOMPLETE:    // usb remove
+            if (lpdb->dbcc_devicetype == DBT_DEVTYP_DEVICEINTERFACE)
+            {
+
+                DevPathName = QString::fromWCharArray(lpdb->dbcc_name); // wchar* to QString
+                qDebug()<<"DBT_DEVICEREMOVECOMPLETE";
+
+
+                //更新串口号的容器
+                allCom.clear();
+                QSerialPort* serial = new QSerialPort();
+                foreach(const QSerialPortInfo &portinfo,QSerialPortInfo::availablePorts())
+                {
+                   serial->setPort(portinfo); //此处的serial是在构造函数中QSerialPort 的对象；
+                   allCom.push_back(serial->portName());
+                }
+
+
+#if 0
+                if ((MyDevPathName.contains(DevPathName, Qt::CaseInsensitive)) && (InterfaceSelect() == PORT_USB)) {
+                    OnBnClickedButtonClose();
+                    //AddToInfOut(_T("Device connected"),1,1);
+                }
+#endif
+            }
+            break;
+        default:
+            break;
+        }
+    }
+    return false;
+}
+
+void MainWindow::closeEvent(QCloseEvent *event)
+{
+    if(isClose){
+        _icon->deleteLater();
+        event->accept();
+     }
+
+    else {
+        event->ignore();
+        this->hide();
+    }
+
+}
+
+
+void MainWindow::on_pushButton_2_clicked()
+{
+    this->hide();
+}
+
+void MainWindow::slotActived(QSystemTrayIcon::ActivationReason res)
+{
+    if(res==QSystemTrayIcon::Trigger)
+    {
+        this->show();
+    }
+}
+
+void MainWindow::slotcloseApp()
+{
+    isClose=true;
+    this->close();
+}
+
+void MainWindow::TimerTimeOut()
+{
+    this->hide();
+}
+
+
+void MainWindow::mousePressEvent(QMouseEvent *event)
+{
+    if (event->button() == Qt::LeftButton) {
+        m_Drag = true;
+        m_DragPosition = event->globalPos() - this->pos();
+        event->accept();
+    }
+}
+
+void MainWindow::mouseMoveEvent(QMouseEvent *event)
+{
+    if (m_Drag && (event->buttons() && Qt::LeftButton)) {
+        move(event->globalPos() - m_DragPosition);
+        event->accept();
+    }
+
+}
+
+void MainWindow::mouseReleaseEvent(QMouseEvent *)
+{
+    m_Drag = false;
+}
+
+bool MainWindow::eventFilter(QObject *watched, QEvent *event)
+{
+    if(event->type() == QEvent::HoverMove)
+        m_timer->start();
+
+    return QMainWindow::eventFilter(watched,event);
+}
diff --git a/mainwindow.h b/mainwindow.h
index a3948a9..216d647 100644
--- a/mainwindow.h
+++ b/mainwindow.h
@@ -1,12 +1,21 @@
 #ifndef MAINWINDOW_H
 #define MAINWINDOW_H
-
 #include <QMainWindow>
+#include <QSerialPort>
+#include <QSerialPortInfo>
+#include <QCloseEvent>
+#include <QVector>
+#include <QSystemTrayIcon>
+#include <QMenu>
+#include <QSettings>
+#include <QTimer>
 
 namespace Ui {
 class MainWindow;
 }
 
+
+
 class MainWindow : public QMainWindow
 {
     Q_OBJECT
@@ -15,8 +24,35 @@ public:
     explicit MainWindow(QWidget *parent = 0);
     ~MainWindow();
 
+private slots:
+    void on_pushButton_clicked();
+
+    void on_pushButton_2_clicked();
+    void slotActived(QSystemTrayIcon::ActivationReason res);
+    void slotcloseApp();
+
+    void TimerTimeOut();
+
 private:
     Ui::MainWindow *ui;
+    QVector<QString> allCom;
+    bool isClose;
+    bool m_Drag;
+    QPoint m_DragPosition;
+    QSystemTrayIcon* _icon;
+    QMenu* _menu;
+
+    QTimer* m_timer;
+
+
+
+protected:
+    bool nativeEvent(const QByteArray &eventType, void *message, long *result);
+    void closeEvent(QCloseEvent *event);
+    void mousePressEvent(QMouseEvent *event);
+    void mouseMoveEvent(QMouseEvent *event);
+    void mouseReleaseEvent(QMouseEvent *);
+    bool eventFilter(QObject *watched, QEvent *event);
 };
 
 #endif // MAINWINDOW_H
diff --git a/mainwindow.ui b/mainwindow.ui
index 6050363..141902c 100644
--- a/mainwindow.ui
+++ b/mainwindow.ui
@@ -1,24 +1,136 @@
+<?xml version="1.0" encoding="UTF-8"?>
 <ui version="4.0">
  <class>MainWindow</class>
- <widget class="QMainWindow" name="MainWindow" >
-  <property name="geometry" >
+ <widget class="QMainWindow" name="MainWindow">
+  <property name="geometry">
    <rect>
     <x>0</x>
     <y>0</y>
-    <width>400</width>
-    <height>300</height>
+    <width>434</width>
+    <height>226</height>
    </rect>
   </property>
-  <property name="windowTitle" >
-   <string>MainWindow</string>
+  <property name="mouseTracking">
+   <bool>true</bool>
   </property>
-  <widget class="QMenuBar" name="menuBar" />
-  <widget class="QToolBar" name="mainToolBar" />
-  <widget class="QWidget" name="centralWidget" />
-  <widget class="QStatusBar" name="statusBar" />
+  <property name="windowTitle">
+   <string>串口监听</string>
+  </property>
+  <property name="tabShape">
+   <enum>QTabWidget::Rounded</enum>
+  </property>
+  <property name="dockOptions">
+   <set>QMainWindow::AllowTabbedDocks|QMainWindow::AnimatedDocks</set>
+  </property>
+  <widget class="QWidget" name="centralWidget">
+   <layout class="QVBoxLayout" name="verticalLayout">
+    <property name="spacing">
+     <number>2</number>
+    </property>
+    <property name="leftMargin">
+     <number>2</number>
+    </property>
+    <property name="topMargin">
+     <number>2</number>
+    </property>
+    <property name="rightMargin">
+     <number>2</number>
+    </property>
+    <property name="bottomMargin">
+     <number>0</number>
+    </property>
+    <item>
+     <widget class="QTabWidget" name="tabWidget">
+      <property name="currentIndex">
+       <number>0</number>
+      </property>
+      <widget class="QWidget" name="tab">
+       <attribute name="title">
+        <string>新设备</string>
+       </attribute>
+       <layout class="QHBoxLayout" name="horizontalLayout">
+        <item>
+         <widget class="QTextEdit" name="textEdit_new"/>
+        </item>
+       </layout>
+      </widget>
+      <widget class="QWidget" name="tab_2">
+       <attribute name="title">
+        <string>全部设备</string>
+       </attribute>
+       <layout class="QHBoxLayout" name="horizontalLayout_2">
+        <item>
+         <widget class="QTextEdit" name="textEdit_all"/>
+        </item>
+       </layout>
+      </widget>
+     </widget>
+    </item>
+    <item>
+     <layout class="QHBoxLayout" name="horizontalLayout_3" stretch="0,0,2,1,0">
+      <property name="spacing">
+       <number>2</number>
+      </property>
+      <item>
+       <spacer name="horizontalSpacer_2">
+        <property name="orientation">
+         <enum>Qt::Horizontal</enum>
+        </property>
+        <property name="sizeHint" stdset="0">
+         <size>
+          <width>40</width>
+          <height>20</height>
+         </size>
+        </property>
+       </spacer>
+      </item>
+      <item>
+       <widget class="QPushButton" name="pushButton">
+        <property name="text">
+         <string>刷新</string>
+        </property>
+       </widget>
+      </item>
+      <item>
+       <spacer name="horizontalSpacer">
+        <property name="orientation">
+         <enum>Qt::Horizontal</enum>
+        </property>
+        <property name="sizeHint" stdset="0">
+         <size>
+          <width>40</width>
+          <height>20</height>
+         </size>
+        </property>
+       </spacer>
+      </item>
+      <item>
+       <widget class="QPushButton" name="pushButton_2">
+        <property name="text">
+         <string>确定</string>
+        </property>
+       </widget>
+      </item>
+      <item>
+       <spacer name="horizontalSpacer_3">
+        <property name="orientation">
+         <enum>Qt::Horizontal</enum>
+        </property>
+        <property name="sizeHint" stdset="0">
+         <size>
+          <width>40</width>
+          <height>20</height>
+         </size>
+        </property>
+       </spacer>
+      </item>
+     </layout>
+    </item>
+   </layout>
+  </widget>
+  <widget class="QStatusBar" name="statusBar"/>
  </widget>
- <layoutDefault spacing="6" margin="11" />
- <pixmapfunction></pixmapfunction>
+ <layoutdefault spacing="6" margin="11"/>
  <resources/>
  <connections/>
 </ui>
